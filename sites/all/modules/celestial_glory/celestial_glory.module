<?php

function celestial_glory_help($path, $arg) {

  $output = '';

  switch ($path) {
    case "admin/help#celestial_glory":
      $output = '<p>'.  t('Back end for <em>Celestial Glory</em> game') .'</p>';
      break;
  }

  return $output;
}

function celestial_glory_perm() {
  return ['access celestial_glory content'];
}

require_once(drupal_get_path('module', 'celestial_glory') . '/menu.inc');
require_once(drupal_get_path('module', 'celestial_glory') . '/admin.inc');
//require_once(drupal_get_path('module', 'celestial_glory') . '/functions.inc');

function celestial_glory_cron() {

  db_set_active('game_cg');

// save old approval ratings

  $sql = 'update elected_officials set approval_45 = approval_30,
    approval_30 = approval_15, approval_15 = approval_rating;';
  $result = db_query($sql);

// move all elected officials toward a 60% approval rating

  $sql = 'update elected_officials set approval_rating = 60
    where (approval_rating >= 59.75 AND approval_rating <= 60.25);';
  $result = db_query($sql);

  $sql = 'update elected_officials
    set approval_rating = approval_rating + 0.25
    where approval_rating <= 59.75;';
  $result = db_query($sql);

  $sql = 'update elected_officials
    set approval_rating = approval_rating - 0.25
    where approval_rating >= 60.25;';
  $result = db_query($sql);

  $sql = 'update elected_officials
    set approval_rating = 0 where approval_rating < 0;';
  $result = db_query($sql);

  $sql = 'update elected_officials
    set approval_rating = 100 where approval_rating > 100;';
  $result = db_query($sql);

// move all hoods toward a 50 beauty rating

// all hoods: move by 0.25

  $sql = 'update neighborhoods set rating = 50
    where (rating >= 49.75 AND rating <= 50.25);';
  $result = db_query($sql);

  $sql = 'update neighborhoods
    set rating = rating + 0.25
    where rating < 49.75;';
  $result = db_query($sql);

  $sql = 'update neighborhoods
    set rating = rating - 0.25
    where rating > 50.25;';
  $result = db_query($sql);

// hoods with no CP: move by an additional 1.75 (total: 2.0)

  $sql = 'update neighborhoods
    set rating = rating + 1.75
    where rating < 48.25 and id not in
    (SELECT users.fkey_neighborhoods_id FROM elected_officials
    left join users on elected_officials.fkey_users_id = users.id
    where fkey_elected_positions_id = 1);';
  $result = db_query($sql);

  $sql = 'update neighborhoods
    set rating = rating - 1.75
    where rating > 51.75 and id not in
    (SELECT users.fkey_neighborhoods_id FROM elected_officials
    left join users on elected_officials.fkey_users_id = users.id
    where fkey_elected_positions_id = 1);';
  $result = db_query($sql);

// give hoods residents to match - each gets $addition plus rating / 6

  $addition = 0; // winter
//  $addition = 5; // spring / fall
//  $addition = 10; // summer
  $addition = -4; // testing jwc 26Jul2014

  $sql = 'UPDATE `neighborhoods` SET residents = residents + 1
    WHERE floor(rating / 6) > (residents - %d);'; // AND rand() > 0.9';
  $result = db_query($sql, $addition);

  $sql = 'UPDATE `neighborhoods` SET residents = residents - 1
    WHERE floor(rating / 6) < (residents - %d) and residents > 0;'; // AND rand() > 0.9';
  $result = db_query($sql, $addition);


// april fools' 2013 -- move 50 people at random
/*
  $sql = 'select users.id from users
    left join elected_officials on users.id = elected_officials.fkey_users_id
    where elected_officials.id IS NULL
    and users.level >= 25
    order by rand()
    limit 50;';
  $result = db_query($sql);
  $data = array();
  while ($item = db_fetch_object($result)) $data[] = $item;

  foreach ($data as $item) {

    $sql = 'select id from neighborhoods where xcoor > 0 and ycoor > 0
      order by rand() limit 1;';
    $result = db_query($sql);
    $hood = db_fetch_object($result);

    $sql = 'update users set fkey_neighborhoods_id = %d
      where id = %d;';
    $result = db_query($sql, $hood->id, $item->id);

  }
*/

  // update maps now done after each CP toss.
   _celestial_glory_draw_maps();

// prune old log files
  $sql = 'delete from challenge_messages where timestamp < "%s"
    limit 10000;';
  $result = db_query($sql, date('Y-m-d H:i:s', time() - 400000));
// a little over a month

  $sql = 'delete from challenge_history where timestamp < "%s"
    limit 5000;';
  $result = db_query($sql, date('Y-m-d H:i:s', time() - 400000));

// add roses
  $sql = 'update neighborhoods
    set roses = least(99, roses + (FLOOR(RAND() * 3)))
    where roses < 99;';
  $result = db_query($sql);

  $sql = 'update neighborhoods
    set roses = greatest(0, roses - (1 + FLOOR(RAND() * 5)))
    where roses > 5 and id <> 6;';
  $result = db_query($sql);

  // Move debatebots.
  $sql = 'select users.id from users
    where meta = "debatebot";';
  $result = db_query($sql);
  $data = array();
  while ($item = db_fetch_object($result)) $data[] = $item;

  foreach ($data as $item) {

    $sql = 'select id from neighborhoods where has_elections = 1
      order by rand() limit 1;';
    $result = db_query($sql);
    $hood = db_fetch_object($result);

    $sql = 'update users set fkey_neighborhoods_id = %d, money = money + 100
      where id = %d;';
    $result = db_query($sql, $hood->id, $item->id);

  }

  // Add zombies?
  $sql = 'select count(*) as count from users where last_access < "%s"
    and meta = "";';
  $result = db_query($sql, date('Y-m-d', time() - (86400 * 180)));
  $old_users = db_fetch_object($result);

  // 100 or more old accounts?  Check zombie count.
  if ($old_users->count >= 100) {
    $sql = 'select count(*) as count from users where meta = "zombie";';
    $result = db_query($sql);
    $zombies = db_fetch_object($result);

    // Fewer than 50 zombies?  Add 100 more.
    if ($zombies->count < 50) {

      $sql = 'select id from users where last_access < "%s"
        order by rand() limit 100;';
      $result = db_query($sql, date('Y-m-d', time() - (86400 * 180)));
      $zombie_users = array();
      while ($item = db_fetch_object($result)) $zombie_users[] = $item;

      // Change each user to a zombie.
      foreach ($zombie_users as $zombie) {
        $name = game_zombie_name();
        if ($zombie->level < 25) {
          $zombie->level += 25 + mt_rand(0,50);
        }
        $sql = 'update users set meta = "zombie", username = "%s", level = %d
          where id = %d;';
        $result = db_query($sql, $name, $zombie->level, $zombie->id);
      }

      // Notify the game players.
      $sql = 'insert into system_messages set message = "%s";';
      $result = db_query($sql,
        'Grrrr!&nbsp; Zombies have sprung up everywhere!');

    }

  }
  db_set_active('default');

}

function _celestial_glory_filter_profanity($message) {

  $profanity = array(
	'4r5e',
	'5h1t',
	'5hit',
	'a_s_s',
	'a55',
	'anal',
	'anus',
	'ar5e',
	'arrse',
	'arse',
	'a§§',
	'as.s',
	'ass',
	'asses',
	'assfucker',
	'ass-fucker',
	'assfukka',
	'asshole',
	'assholes',
	'asskisser',
	'asss',
	'asswad',
	'asswhole',
	'asswipe',
  'asz',
  'azz',
	'beotch',
	'b!tch',
	'b00bs',
	'b17ch',
	'b1tch',
	'badass',
	'badasss',
	'ballbag',
	'ballsack',
	'bastard',
	'beastial',
	'beastiality',
	'beastility',
	'beaver',
	'bellend',
	'belly whacker',
	'bestial',
	'bestiality',
	'beotch',
	'b!tch',
	'bytch',
	'bi+ch',
	'biatch',
	'bit.ch',
	'bitch',
	'bitcher',
	'bitchers',
	'bitches',
	'bitchin',
	'bitching',
	'bloody',
	'blow job',
	'blowjob',
	'blowjobs',
	'boiolas',
	'bollock',
	'bollok',
	'bonehead',
	'boner',
	'boob',
	'boobs',
	'booobs',
	'boooobs',
	'booooobs',
	'booooooobs',
	'browntown',
	'btch',
	'buceta',
	'bucket cunt',
//	'bugger',
	'bullshit',
	'bung hole',
	'butch',
	'butt breath',
	'butt hair',
	'buttface',
	'buttfuck',
	'buttfucker',
	'butthead',
	'buttheadddd',
	'butthole',
	'buttmuch',
	'buttpicker',
	'buttplug',
	'c0ck',
	'c0cksucker',
	'carpet muncher',
	'cawk',
	'chink',
	'cipa',
	'circle jerk',
	'cl1t',
	'clam',
	'clit',
	'clitoris',
	'clits',
	'cnut',
	'cobia',
	'cock',
	'cockface',
	'cockhead',
	'cockmunch',
	'cockmuncher',
	'cocks',
	'cocksuck',
	'cocksucked',
	'cocksucker',
	'cock-sucker',
	'cocksucking',
	'cocksucks',
	'cocksuka',
	'cok',
	'cokmuncher',
	'coksucka',
	'coon',
	'cooter',
	'cox',
	'crap',
	'cum',
	'cummer',
	'cumming',
	'cums',
	'cumshot',
	'cunilingus',
	'cunillingus',
	'cunnilingus',
	'cunnilingus',
	'cunt',
	'cuntlick',
	'cuntlicker',
	'cuntlicking',
	'cunts',
	'cyalis',
	'cyberfuc',
	'cyberfuck',
	'cyberfucked',
	'cyberfucker',
	'cyberfuckers',
	'cyberfucking',
	'dammit',
	'd1ck',
	'dam',
	'damn',
	'dbag',
	'dick',
	'dickk',
	'dickhead',
	'dike',
	'dildo',
	'dildos',
	'dink',
	'dinks',
	'dipshit',
	'dirsa',
	'dlck',
	'dog-fucker',
	'doggin',
	'dogging',
	'dong',
	'donkeyribber',
	'doosh',
	'douche bag',
	'duche',
	'dumbass',
	'dumbfuck',
	'dyke',
	'dyke',
	'ejaculate',
	'ejaculated',
	'ejaculates',
	'ejaculating',
	'ejaculatings',
	'ejaculation',
	'ejakulate',
	'fuc',
	'fuc k',
	'fu c k',
	'fukin',
	'fck',
	'fvk',
	'f u c k',
	'f u c k e r',
	'f_u_c_k',
	'f4nny',
	'fag',
	'fagget',
	'fagging',
	'faggit',
	'faggitt',
	'faggot',
	'faggs',
	'fagot',
	'fagot',
	'fagots',
	'fags',
	'fanny',
	'fannyflaps',
	'fannyfucker',
	'fanyy',
	'fart',
	'farted',
	'farting',
	'fartings',
	'farts',
	'farty',
	'fatass',
	'fatso',
	'fcuk',
	'fcuker',
	'fcuking',
	'feck',
	'fecker',
	'felatio',
	'felching',
	'fellate',
	'fellatio',
	'fellatio',
	'fingerfuck',
	'fingerfucked',
	'fingerfucker',
	'fingerfuckers',
	'fingerfucking',
	'fingerfucks',
	'fistfuck',
	'fistfucked',
	'fistfucker',
	'fistfuckers',
	'fistfucking',
	'fistfuckings',
	'fistfucks',
	'flange',
	'fook',
	'fooker',
	'fu.ck',
	'fuck',
	'fucka',
	'fucked',
	'fucker',
	'fuckers',
	'fuckers',
	'fuckhead',
	'fuckheads',
	'fuckin',
	'fucking',
	'fuckings',
	'fuckingshitmotherfucker',
	'fuckme',
	'fuckr',
	'fucks',
	'fuckwhit',
	'fuckwit',
	'fudge packer',
	'fudgepacker',
	'fuggin',
	'fuk',
	'fuker',
	'fukker',
	'fukkin',
	'fuks',
	'fukwhit',
	'fukwit',
	'furburger',
	'fux',
	'fux0r',
	'fvck',
	'gangbang',
	'gangbanged',
	'gangbangs',
	'gaylord',
	'gaysex',
	'gaysex',
	'gazongers',
	'goatse',
	'god-dam',
	'g--dam',
	'goddamn',
	'goddamn',
	'goddamned',
	'god-damned',
	'gonads',
	'gook',
	'guinne',
	'hard on',
	'hardcoresex',
	'hell',
	'heshe',
	'hoar',
	'hoare',
	'ho.es',
	'hoer',
	'homo',
	'hooker',
	'hore',
	'horniest',
	'horny',
	'hotsex',
	'hussy',
	'lmao',
	'lmfao',
	'jack off',
	'jackass',
	'jacking off',
	'jackoff',
	'jack-off',
	'jerk-off',
	'jism',
	'jiz',
	'jiz',
	'jizm',
	'jizz',
	'kawk',
	'kike',
	'knobead',
	'knobed',
	'knobend',
	'knobhead',
	'knobjocky',
	'knobjokey',
	'kock',
	'kondum',
	'kondums',
	'kum',
	'kummer',
	'kumming',
	'kums',
	'kunilingus',
	'kunilingus',
	'l3i+ch',
	'l3itch',
	'labia',
	'lesbian',
	'lesbo',
	'lmao',
	'lma0',
	'lmfa0',
	'm0f0',
	'm0fo',
	'm45terbate',
	'ma5terb8',
	'ma5terbate',
	'masterb8',
	'masterbat*',
	'masterbat3',
	'masterbate',
	'master-bate',
	'masterbation',
	'masterbations',
	'masturbate',
	'mof0',
	'mofo',
	'mo-fo',
	'mothafuck',
	'mothafucka',
	'mothafuckas',
	'mothafuckaz',
	'mothafucked',
	'mothafucker',
	'mothafuckers',
	'mothafuckin',
	'mothafucking',
	'mothafuckings',
	'mothafucks',
	'mother fucker',
	'motherfuck',
	'motherfuck',
	'motherfucked',
	'motherfucker',
	'motherfuckers',
	'motherfuckin',
	'motherfuckin',
	'motherfucking',
	'motherfuckings',
	'motherfuckka',
	'motherfucks',
	'muff',
	'mutha',
	'muthafecker',
	'muthafuckker',
	'muther',
	'mutherfucker',
	'n1gga',
	'n1gger',
	'nazi',
	'nigg3r',
	'nigg4h',
	'nigga',
	'niggah',
	'niggas',
	'niggaz',
	'nigger',
	'niggers',
	'nobhead',
	'nobjocky',
	'nobjokey',
	'numbnuts',
	'nutsack',
	'orgasim',
	'orgasims',
	'orgasm',
	'orgasms',
	'p0rn',
	'pawn',
	'pecker',
	'penis',
	'penisfucker',
	'phonesex',
	'phuck',
	'phuk',
	'phuked',
	'phuking',
	'phuking',
	'phukked',
	'phukking',
	'phuks',
	'phuks',
	'phuq',
	'phuq',
	'pigfucker',
	'pimp',
	'pimpis',
	'piss',
	'pissed',
	'pisser',
	'pissers',
	'pisses',
	'pissflaps',
	'pissin',
	'pissing',
	'pissoff',
	'pissrr',
	'poop',
	'porn',
	'porno',
	'pornography',
	'pornos',
	'pron',
	'pube',
	'pusse',
	'pussi',
	'pussies',
	'pussies',
	'pussy',
	'pussys',
	'pvssy',
	'queer',
	'rectum',
	'retard',
	'rimjaw',
	'rimming',
	'rape',
	'shlt',
	'sh!t',
	'sh!ts',
	'slut',
	's hit',
	's.o.b.',
	's_h_i_t',
	'sadist',
	'schlong',
	'screw',
	'screwing',
	'scroat',
	'scrote',
	'scrotum',
	'semen',
	'sex',
	'sh!+',
	'sh!t',
	'sh.it',
	'sh1t',
	'shag',
	'shagger',
	'shaggin',
	'shagging',
	'sheister',
	'shemale',
	'sh it',
	'shi+',
	'shit',
	'sh!t',
	'shitdick',
	'shite',
	'shited',
	'shited',
	'shitey',
	'shitfuck',
	'shitfull',
	'shitfull',
	'shithead',
	'shiting',
	'shitings',
	'shits',
	'shits',
	'shitted',
	'shitter',
	'shitters',
	'shitting',
	'shittings',
	'shitty',
	'shitty',
	'shiz',
	'sht',
	'shttim',
	'skank',
	'slag',
	'sleaze',
	'slut',
	'slut',
	'sluts',
	'smartass',
	'smegma',
	'smut',
	'snatch',
	'son-of-a-bitch',
	'spac',
	'spunk',
	'stupidass',
	't1tt1e5',
	't1tties',
	'teets',
	'teez',
	'testical',
	'testicle',
	'tit',
	'titfuck',
	'tits',
	'titt',
	'tittie5',
	'tittiefucker',
	'titties',
	'tittyfuck',
	'tittywank',
	'titwank',
	'tosser',
	'turd',
	'tw4t',
	'twat',
	'twathead',
	'twatty',
	'twunt',
	'twunter',
	'tampon',
	'v14gra',
	'v1gra',
	'vagina',
	'viagra',
	'vulva',
	'w00se',
	'wang',
	'wank',
	'wanker',
	'wanky',
	'weakass',
	'weakasss',
	'wetback',
	'whoar',
	'whore',
	'wtf',
	);

  $msg = str_replace(
    array('@', '$', "'", '.', '&#039;', '&quot;'),
    array('a', 's', ' ', ' ', ' ', ' '),
    $message);

  setlocale(LC_ALL, 'en_US');
  $msg = preg_replace('/[^A-Za-z0-9 ]/', '',
    iconv('utf-8', 'ascii//TRANSLIT', $msg));

  foreach ($profanity as $word) {
    $pattern = "/\b$word\b/i"; // Check word boundaries, ignoring case

    if (preg_match($pattern, $msg) == 1) return "XXX: found $word XXX";

  }

  return $message;

}

function _cg_fetch_user() {
  return zg_fetch_user();
}

function _celestial_glory_fetch_user() {
  return zg_fetch_user();
  global $game, $phone_id, $extra_messages, $next_level, $user;

// only allow access through authorized clients
  if ((strpos($_SERVER['HTTP_USER_AGENT'], 'com.ziquid.celestialglory') === FALSE) &&
    (strpos($_SERVER['HTTP_USER_AGENT'], 'com.cheek.celestialglory') === FALSE) &&
    ($_SERVER['REMOTE_ADDR'] != '66.211.170.66') && // paypal IPN
    ($_SERVER['REMOTE_ADDR'] != '173.0.81.1') && // paypal IPN
    ($_SERVER['REMOTE_ADDR'] != '173.0.81.33') && // paypal IPN
    ($user->roles[4] != 'web game access') && // web users
    (substr(arg(2), 0, 3) != 'fb=') && // identified facebook user
    (substr(arg(2), 0, 3) != 'ai-') && // AI player
    (arg(2) != 'facebook') && // unidentified facebook user
    (substr(arg(2), 0, 3) != 'ms=') // unidentified MS user
  ) {
/*
      mail('joseph@cheek.com', 'unauthorized client',
        "Unauthorized user agent of " . $_SERVER['HTTP_USER_AGENT'] .
        " for phone_id " . check_plain(arg(2)));
*/
      echo t('This game must be accessed through an authorized client.  ');
      echo t('Please e-mail zipport@ziquid.com if you have any questions.');
      exit;

  }

  if (strpos($arg2, 'cheek.com') !== FALSE) { // Jon?  send headers
    mail('joseph@ziquid.com', 'Jon? headers',
    implode('\n', getallheaders()));
    mail('joseph@ziquid.com', 'Jon? headers',
    'Jon is back!');
  }

  if (($user->uid != 0) &&
    (strpos($_SERVER['HTTP_USER_AGENT'], 'com.cheek') === FALSE) &&
    (strpos($_SERVER['HTTP_USER_AGENT'], 'com.ziquid') === FALSE)) {
/*
    mail('joseph@cheek.com', 'logged-in user access but no com.cheek!',
      $_SERVER['HTTP_USER_AGENT'] . "\n\n" .
      print_r($user, TRUE));
*/
  }

  if (substr(arg(2), 0, 3) == 'ai-') {
// AI player -- only allow from certain IPs
    if ((ip_address() != $_SERVER['SERVER_ADDR']) &&
    ($user->roles[4] != 'web game access')) {
      drupal_goto(check_plain(arg(0)) . '/error/'
        . check_plain(arg(2)) . '/E-4713'); // ai access from a different host
    }
  }


  $changes_made = FALSE;

  $game = check_plain(arg(0));
  $phone_id = _celestial_glory_get_phoneid();
// if (arg(2) == 'facebook') echo '$phone_id returned is ' . $phone_id . '<br/>';
  $arg2 = check_plain(arg(2));
  db_set_active('game_' . $game);

  include (drupal_get_path('module', $game) . '/game_defs.inc');

// check for banned users -- phone_id

  $sql = 'select * from user_blocks where phone_id = "%s";';
  $result = db_query($sql, $phone_id);
  $blocked_user = db_fetch_object($result);

  if (!empty($blocked_user) &&
    $blocked_user->phone_id == $phone_id) { // user is banned!
    drupal_goto(check_plain(arg(0)) . '/error/'
      . check_plain(arg(2)) . '/E-0467'); // banned by phone ID
  }

// check for banned users -- ip address

  $sql = 'select * from user_blocks where ip_address = "%s"
    or ip_address = "%s";';
  $result = db_query($sql, $_SERVER['REMOTE_ADDR'], ip_address());
  $blocked_ip = db_fetch_object($result);

  if (!empty($blocked_ip)) { // user is banned!
    drupal_goto(check_plain(arg(0)) . '/error/'
      . check_plain(arg(2)) . '/E-0468'); // banned by IP
  }

// Nook Color 1.4.1 removes the 'nkc+' prefix -- fix our db

  if (strpos($_SERVER['HTTP_USER_AGENT'], 'BNRV200') !== FALSE) {

    $sql = 'select * from users where phone_id = "%s";';
    $result = db_query($sql, 'nkc ' . $phone_id);
    $game_user = db_fetch_object($result);

    if (!empty($game_user)) {
      $sql = 'delete from users where phone_id = "%s";';
         $result = db_query($sql, $phone_id);
      $sql = 'update users set phone_id = "%s"
        where phone_id = "%s";';
      $result = db_query($sql, $phone_id, 'nkc ' . $phone_id);

//      mail('joseph@cheek.com', 'Nook Color Phone ID swap',
//        "nkc $phone_id is now $phone_id");
    }

  }


// get uid

  $sql = 'select id from users
    where phone_id = "%s";';
  $result = db_query($sql, $phone_id);
  $game_user = db_fetch_object($result);

// update expenses

  $sql = 'update users set expenses =

    (SELECT sum(equipment.upkeep * equipment_ownership.quantity)
    as expenses from equipment
    left join equipment_ownership
    on equipment_ownership.fkey_equipment_id = equipment.id and
    equipment_ownership.fkey_users_id = %d)

    where id = %d;';
  $result = db_query($sql, $game_user->id, $game_user->id);

// get full user object

  $sql = 'select users.*, elected_positions.energy_bonus as ep_energy_bonus,
    elected_positions.can_broadcast_to_party, clan_members.fkey_clans_id,
    elected_positions.max_level as max_level_for_office,
    CURRENT_TIMESTAMP as time_now, neighborhoods.name as location

    from users

    LEFT OUTER JOIN elected_officials
    ON elected_officials.fkey_users_id = users.id
    LEFT OUTER JOIN elected_positions
    ON elected_positions.id = elected_officials.fkey_elected_positions_id

    LEFT OUTER JOIN clan_members
    ON clan_members.fkey_users_id = users.id

    LEFT OUTER JOIN neighborhoods
    ON users.fkey_neighborhoods_id = neighborhoods.id

    where phone_id = "%s";';
  $result = db_query($sql, $phone_id);
  $game_user = db_fetch_object($result);


  $sql = 'select sum(equipment.energy_increase * equipment_ownership.quantity)
    as energy_increase from equipment

    LEFT OUTER JOIN equipment_ownership
    ON equipment_ownership.fkey_equipment_id = equipment.id
    WHERE equipment_ownership.fkey_users_id = %d

    union all

    select sum(staff.energy_increase * staff_ownership.quantity)
    as energy_increase from staff

    LEFT OUTER JOIN staff_ownership
    ON staff_ownership.fkey_staff_id = staff.id
    WHERE staff_ownership.fkey_users_id = %d;';
  $result = db_query($sql, $game_user->id, $game_user->id);
  $eq = db_fetch_object($result); // equipment
  $game_user->eq_energy_increase = $eq->energy_increase;
  $st = db_fetch_object($result); // staff
  $game_user->st_energy_increase = $st->energy_increase;
firep($game_user);

// start welcome wizard if user not in db
  if (empty($game_user->id)) {
/*
    if ($arg2 == 'facebook') {
      echo 'would redirect to welcome ' . $phone_id ;
      echo '<a href="/' . $game . '/welcome/' . $arg2 . '">do it manually</a>';
      echo '<a href="/' . $game . '/quests/' . $arg2 . '">go straight to quests</a>';
      exit;
    }
*/
    drupal_goto($game . '/welcome/' . $arg2);
  }

// save the IP address, user agent of user
  _celestial_glory_save_user_agent($game_user);
  _celestial_glory_save_user_IP($game_user);
  _celestial_glory_check_authKey($game_user);

  if (strpos($_SERVER['HTTP_USER_AGENT'], 'BlueStacks') !== FALSE) {
    if ($game_user->level <= 50) {
      _celestial_glory_set_value($game_user->id, 'sdk', 1);
    }
  }

  $sql = 'select experience from levels where level = %d;';
  $result = db_query($sql, $game_user->level + 1);
  $level = db_fetch_object($result);
  $next_level = $level->experience;
  if ($next_level == 0) $next_level = 99999999;
  $leveled_up = FALSE;

  if ($game_user->experience >= $next_level) { // leveled up!

    $changes_made = $leveled_up = TRUE;

    if ($game_user->level >= 5)
    $game_user->skill_points += 4;

    $game_user->energy = $game_user->energy_max;
    $game_user->actions = max($game_user->actions_max, $game_user->actions);
    $game_user->level++;

    // leveled up?  read levels again!
    $sql = 'select experience from levels where level = %d;';
    $result = db_query($sql, $game_user->level + 1);
    $level = db_fetch_object($result);
    $next_level = $level->experience;
    if ($next_level == 0) $next_level = 99999999;

    $extra_messages .= '<div class="level-up">
      <div class="level-up-header">Congratulations!</div>
      <div class="level-up-text">You have reached level ' .
    $game_user->level . '!</div>';

    if ($game_user->level >= 6) {

      $extra_messages .= '<div class="level-up-text"><a href="/' . $game .
        '/increase_skills/' . $arg2 . '/none">You have
        <strong>4</strong> new skill points to spend</a></div>';

    }

    if (!empty($game_user->max_level_for_office) &&
      $game_user->level > $game_user->max_level_for_office) {

      $sql = 'delete from elected_officials where fkey_users_id = %d;';
      $result = db_query($sql, $game_user->id);
      $extra_messages .= '<div class="level-up-text">' .
        t('You have become too influential to remain
        in your current office.&nbsp; You resign your position.') . '</div>';

    }

    $extra_messages .= '</div>';

  } // leveled up!

// calculate energy

  $energy_next_gain = strtotime($game_user->energy_next_gain);
  $energy_bonus = 10 + $game_user->ep_energy_bonus +
    $game_user->eq_energy_increase + $game_user->st_energy_increase;
  if (!empty($game_user->fkey_clans_id)) $energy_bonus++; // bonus for joining a clan
  $secs_until = $energy_next_gain - time();

  while (($game_user->energy < $game_user->energy_max) &&
  ($secs_until <= 0)) { // do we need energy?

    $changes_made = TRUE;
    $game_user->energy += $energy_bonus; // add 10 energy
    $energy_next_gain += $energy_wait; // next add in $energy_wait secs
    $secs_until += $energy_wait; // ditto

  }

  if ($game_user->energy > $game_user->energy_max) {
    $changes_made = TRUE; // just in case
    $game_user->energy = $game_user->energy_max; // can't go beyond max
  }

  // calculate income

  $income_next_gain = strtotime($game_user->income_next_gain);
  $secs_until = $income_next_gain - time();
  $max_income_gain = 72;

  while ($secs_until <= 0) { // do we get money?

    $changes_made = TRUE;
    if ($max_income_gain > 0) // add money
      $game_user->money += $game_user->income - $game_user->expenses;
    $income_next_gain += 3600; // next add in 60 mins
    $secs_until += 3600; // ditto
    $max_income_gain--;

  }

  $actions_next_gain = strtotime($game_user->actions_next_gain);
  $secs_until = $actions_next_gain - time();

  // calculate actions

  while (($game_user->actions < $game_user->actions_max) &&
  ($secs_until <= 0)) { // do we need actions?

    $changes_made = TRUE;
    $game_user->actions++; // add 1 action
    $actions_next_gain += 180; // next add in 3 mins
    $secs_until += 180; // ditto

  }

  while (($game_user->actions > $game_user->actions_max) &&
    ($secs_until <= 0)) { // do we need actions?

    $changes_made = TRUE;
    $game_user->actions--; // delete 1 action
    $actions_next_gain += 180; // next add in 3 mins
    $secs_until += 180; // ditto

  }

// frozen

  if ($game_user->meta == 'frozen')
    $extra_messages = '<div class="title">- = * F R O Z E N * = -</div>';

  if ($changes_made) { // save changes, if needed

    $game_user->energy_next_gain = date('Y-m-d H:i:s', $energy_next_gain);
    $game_user->income_next_gain = date('Y-m-d H:i:s', $income_next_gain);
    $game_user->actions_next_gain = date('Y-m-d H:i:s', $actions_next_gain);
    $sql = 'update users set energy_next_gain = "%s", energy = %d,
      energy_max = %d, level = %d, income_next_gain = "%s",
      actions = %d, actions_next_gain = "%s",
      money = %d, skill_points = %d, last_access = CURRENT_TIMESTAMP
      where id = %d;';
    $result = db_query($sql, $game_user->energy_next_gain,
    $game_user->energy, $game_user->energy_max,
    $game_user->level, $game_user->income_next_gain,
    $game_user->actions, $game_user->actions_next_gain,
    $game_user->money, $game_user->skill_points, $game_user->id);

  } else { // only save last_access

    $sql = 'update users set last_access = CURRENT_TIMESTAMP
      where id = %d;';
    $result = db_query($sql, $game_user->id);

  }

  if ($leveled_up && ($game_user->level == 6) &&
    (substr($game_user->meta, 0, 3) !== 'ai_')) {

//    if (($game == 'stlouis') || ($game == 'robber_barons'))
      drupal_goto($game . '/choose_clan/' . $arg2 . '/0');

//    if ($game == 'celestial_glory')
//      drupal_goto($game . '/debates/' . $arg2);

  }

  return $game_user;

}

function _cg_header($game_user) {
  return zg_fetch_header($game_user);
}

function _celestial_glory_header($game_user) {
  return zg_fetch_header($game_user);
  global $game, $phone_id, $extra_messages, $next_level;
  include (drupal_get_path('module', $game) . '/game_defs.inc');

  // energy

  $energy_text = '';
  $energy_bonus = 10 + $game_user->ep_energy_bonus +
    $game_user->eq_energy_increase + $game_user->st_energy_increase;
  if (!empty($game_user->fkey_clans_id)) $energy_bonus++; // bonus for joining a clan

  if ($game_user->energy != $game_user->energy_max) {

    $energy_secs_until = strtotime($game_user->energy_next_gain) - time();
    //firep('secs_until now at ' . $secs_until);

    $energy_minutes = (string) (int) ($energy_secs_until / 60);
    $energy_seconds = sprintf('%02d', (int) ($energy_secs_until % 60));

    $energy_text = '+' . $energy_bonus . ' in ' .
      $energy_minutes . ':' . $energy_seconds;

  } else {

    $energy_minutes = $energy_seconds = 0;

  }

  // actions

  $actions_text = '';

  if ($game_user->actions != $game_user->actions_max) {

    $actions_secs_until = strtotime($game_user->actions_next_gain) - time();
// firep('secs_until now at ' . $secs_until);

    $actions_minutes = (string) (int) ($actions_secs_until / 60);
    $actions_seconds = sprintf('%02d', (int) ($actions_secs_until % 60));

    $actions_text = ($game_user->actions > $game_user->actions_max ? '-' : '+') .
      '1 in ' . $actions_minutes . ':' . $actions_seconds;

  } else {

    $actions_minutes = $actions_seconds = 0;

  }

  // income

  $income_text = '';
  $income_bonus = $game_user->income - $game_user->expenses;

  if ($income_bonus != 0) {

    $income_str = $income_bonus . '';

    $money_secs_until = strtotime($game_user->income_next_gain) - time();
    //firep('income secs_until now at ' . $money_secs_until);

    $money_minutes = (string) (int) ($money_secs_until / 60);
    $money_seconds = sprintf('%02d', (int) ($money_secs_until % 60));
    $money_secondsStr = ':' . sprintf('%02d', (int) ($money_secs_until % 60));

    if (strlen($income_str) > 6) {
      $income_str = substr($income_str, 0, strlen($income_str) - 3) . 'K';
      $money_secondsStr = 'm';
    }

    $income_text = '+' . $income_str . ' in ' . $money_minutes .
      $money_secondsStr;

  } else {

    $money_minutes = $money_seconds = 0;

  }

  $money_str = $game_user->money . '';

  if (strlen($money_str) > 8) {
    $money_str = substr($money_str, 0, strlen($money_str) - 6) . 'M';
  } elseif (strlen($money_str) > 5) {
    $money_str = substr($money_str, 0, strlen($money_str) - 3) . 'K';
  }


// more skill points?

  if ($game_user->skill_points > 0) {

    $level_text = '<div class="level"><strong><a href="/' . $game .
      '/increase_skills/' . check_plain(arg(2)) . '/none">' . $game_user->level .
      '!</a></strong><div class="level-text">Level</div></div>';

  } else {

    $level_text = '<div class="level"><strong>' . $game_user->level .
      '</strong><div class="level-text">Level</div></div>';

  }


// experience

  $experience_str = $game_user->experience . '';
  if (strlen($experience_str) > 5) {
    $experience_str = substr($experience_str, 0, strlen($experience_str) - 3) .
    'K';
  }

// event points

  $sql = 'select points, last_goal_achieved
    from event_points where fkey_users_id = %d;';
  $result = db_query($sql, $game_user->id);
  $points_obj = db_fetch_object($result);

  $points_text = '';

  if ($points_obj->points > 0) { // user has some points

    $sql = 'select points from event_milestones where points > %d
      order by points asc limit 1;';
    $result = db_query($sql, $points_obj->last_goal_achieved);
    $goal_obj = db_fetch_object($result);

    if ($goal_obj->points == 0) $goal_obj->points = 99999999;

firep('points: ' . $points_obj->points);
firep('points for next prize: ' . $goal_obj->points);

    // Does user get a prize?
    if ($points_obj->points >= $goal_obj->points) {

firep('a prize is deserved!');

// what's goal after this?
      $sql = 'select points from event_milestones where points > %d
        order by points asc limit 1;';
      $result = db_query($sql, $goal_obj->points);
      $new_goal_obj = db_fetch_object($result);

      if ($new_goal_obj->points == 0) $new_goal_obj->points = 99999999;

      // Which prize should be given?
      $sql = 'select * from monthly_prizes where id = %d;';
      $result = db_query($sql, date('m'));
      $prize = db_fetch_object($result);
      if ($goal_obj->points >= 8000) {
        $prize_id = $prize->fkey_equipment_id_large; // large gift
      }
      else if ($goal_obj->points >= 1500) {
        $prize_id = $prize->fkey_equipment_id_medium; // med gift
      }
      else {
        $prize_id = $prize->fkey_equipment_id_small; // small gift
      }

// does user have any of this present?
      $sql = 'select quantity from equipment_ownership
        where fkey_users_id = %d
        and fkey_equipment_id = %d;';
      $result = db_query($sql, $game_user->id, $prize_id);
      $equip_quantity = db_fetch_object($result);

      if (empty($equip_quantity)) { // create record

        $sql = 'insert into equipment_ownership
          (fkey_users_id, fkey_equipment_id, quantity)
          values
          (%d, %d, 1);';
        db_query($sql, $game_user->id, $prize_id);

      }
      else { // update record

        $sql = 'update equipment_ownership
          set quantity = quantity + 1
          where fkey_users_id = %d
          and fkey_equipment_id = %d;';
        db_query($sql, $game_user->id, $prize_id);

      } // create or update record

      // Update record of user getting this present.
      $sql = 'update event_points set last_goal_achieved = %d
        where fkey_users_id = %d;';
      db_query($sql, $goal_obj->points, $game_user->id);

      // Get present title.
      $sql = 'select name from equipment
        where id = %d;';
      $result = db_query($sql, $prize_id);
      $equip_obj = db_fetch_object($result);
      $equip_name = str_replace(' ', '&nbsp;', strtolower($equip_obj->name));

      $points_text = '<div class="subsubtitle">' . $debate .
        ' points: ' . $points_obj->points . ' &nbsp; Next prize at: ' .
        $new_goal_obj->points . ' points
      </div>
      <div class="level-up with-image">
        <div class="level-up-header">Prize Received!</div>
        <div class="level-up-image">
          <img src="/sites/default/files/images/equipment/' .
          $game . '-' . $prize_id . '.png" width="96">
        </div>
        <div class="level-up-text">For gaining ' . $goal_obj->points .
          ' ' . $debate . ' points, you have received a bonus of <strong>one&nbsp;' .
          $equip_name . '!</strong></div>
        <div class="level-up-text">Look for another bonus at ' .
          $new_goal_obj->points . '&nbsp;points.</div>
      </div>';

    }
    else { // user doesn't get a prize

      if (arg(1) == 'debates') {
        $points_text = '<div class="subsubtitle">' . $debate .
          ' points: ' . $points_obj->points . ' &nbsp; Next prize at: ' .
          $goal_obj->points . ' points
        </div>';

      }

    } // does user get a prize?

  } // user has no points


  // Show it!

  $hood = '';

  if ($game == 'celestial_glory') $hood = 'hood' .
    $game_user->fkey_neighborhoods_id;

  $arg2 = check_plain(arg(2));

  echo <<< EOF
<div class="header $hood">
<div class="money"><div id="money-id">$money_str</div>
  <div class="money-text">$game_user->values</div>
  <div id="income-time">$income_text</div></div>
<div class="actions"><div id="actions-id">$game_user->actions</div> /
$game_user->actions_max <div class="actions-text">Actions</div>
  <div id="actions-time">$actions_text</div>
  </div>
  <div class="experience"><strong>$experience_str</strong> /
  $next_level<div class="experience-text">Spirituality</div></div>
<div class="energy"><div id="energy-id">$game_user->energy</div> /
$game_user->energy_max <div class="energy-text">Energy</div>
  <div id="energy-time">$energy_text</div></div>
<div class="home"><a href="/$game/home/$arg2"><img
  src="/sites/default/files/images/{$game}_home_icon_large.png"/></a></div>
$level_text
</div>
$points_text
$extra_messages
<script type="text/javascript">

  var energy_minutes = $energy_minutes;
  var energy_seconds = $energy_seconds;
  var energy = $game_user->energy;
  var energy_max = $game_user->energy_max;
  var energy_to_add = $energy_bonus;
  var energy_interval = $energy_wait;

  var money_minutes = $money_minutes;
  var money_seconds = $money_seconds;
  var money = $game_user->money;
  var money_to_add = $income_bonus;
  var money_interval = 3600;

  var actions_minutes = $actions_minutes;
  var actions_seconds = $actions_seconds;
  var actions = $game_user->actions;
  var actions_max = $game_user->actions_max;
  var actions_to_add = 1;
  var actions_interval = 180;

  function display_energy() {

    document.getElementById('energy-id').innerHTML = energy;

    if ((energy < energy_max) && (energy_to_add > 0)) {

      document.getElementById('energy-time').innerHTML =
        '+' + energy_to_add + ' in ' + energy_minutes + ':' +
        (energy_seconds < 10 ? '0' + energy_seconds : energy_seconds);

    } else {

      document.getElementById('energy-time').innerHTML = '';

    }

  }

  function display_actions() {

    document.getElementById('actions-id').innerHTML = actions;

    if (actions != actions_max) {

      if (actions > actions_max) {
        var operand = '-';
      } else {
        var operand = '+';
      }

      document.getElementById('actions-time').innerHTML =
        operand + actions_to_add + ' in ' + actions_minutes + ':' +
        (actions_seconds < 10 ? '0' + actions_seconds : actions_seconds);

    } else {

      document.getElementById('actions-time').innerHTML = '';

    }

  }

  function display_money() {

    if (money_to_add > 0) {

      if (money.toString().length > 8) {
        moneyStr = money.toString().substr(0,money.toString().length - 6) + "M";
      } else if (money.toString().length > 5) {
        moneyStr = money.toString().substr(0,money.toString().length - 3) + "K";
      } else {
        moneyStr = money.toString();
      }

      if (money_to_add.toString().length > 5) {
        money_to_addStr =
          money_to_add.toString().substr(0,money_to_add.toString().length - 3) +
            "K";
        // money_secondsStr = "m";
        money_secondsStr = ':' + (money_seconds < 10 ? '0' + money_seconds : money_seconds);
      } else {
        money_to_addStr = money_to_add.toString();
        money_secondsStr = ':' + (money_seconds < 10 ? '0' + money_seconds : money_seconds);
      }

      document.getElementById('money-id').innerHTML = moneyStr;

      document.getElementById('income-time').innerHTML =
        '+' + money_to_addStr + ' in ' + money_minutes + money_secondsStr;

    }

  }

  function add_all_stuff() {

    if ((energy_seconds == 0) && (energy_minutes > 0)) {

      energy_seconds = 60;
      energy_minutes -= 1;

    }

    if ((money_seconds == 0) && (money_minutes > 0)) {

      money_seconds = 60;
      money_minutes -= 1;

    }

    if ((actions_seconds == 0) && (actions_minutes > 0)) {

      actions_seconds = 60;
      actions_minutes -= 1;

    }

    energy_seconds--;
    actions_seconds--;
    money_seconds--;

    if ((energy_seconds == 0) && (energy_minutes == 0)) {

      energy += energy_to_add;
      energy_seconds = energy_interval % 60;
      energy_minutes = Math.floor(energy_interval / 60);

    }

    if ((money_seconds == 0) && (money_minutes == 0)) {

      money += money_to_add;
      money_seconds = money_interval % 60;
      money_minutes = Math.floor(money_interval / 60);

    }

    if ((actions_seconds == 0) && (actions_minutes == 0) &&
      (actions < actions_max)) {

      actions += actions_to_add;
      actions_seconds = actions_interval % 60;
      actions_minutes = Math.floor(actions_interval / 60);

    }

    if ((actions_seconds == 0) && (actions_minutes == 0) &&
      (actions > actions_max)) {

      actions -= actions_to_add;
      actions_seconds = actions_interval % 60;
      actions_minutes = Math.floor(actions_interval / 60);

    }

    if (energy >= energy_max) {

      energy = energy_max;

    }

    display_energy();
    display_actions();
    display_money();

  }

  var interval_timer = setInterval('add_all_stuff()', 1000);

</script>
EOF;

}
